{
  "name": "vscode-abap-remote-fs",
  "displayName": "ABAP remote filesystem",
  "description": "Work on your ABAP code straight from the server",
  "version": "0.6.1",
  "publisher": "murbani",
  "license": "MIT",
  "icon": "images/abapfs_icon.png",
  "author": {
    "email": "marcello.urbani@gmail.com",
    "name": "Marcello Urbani"
  },
  "homepage": "https://github.com/marcellourbani/vscode_abap_remote_fs",
  "engines": {
    "vscode": "^1.33.0"
  },
  "categories": [
    "Other"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/marcellourbani/vscode_abap_remote_fs.git"
  },
  "keywords": [
    "ABAP",
    "sap",
    "filesystem",
    "remote"
  ],
  "scripts": {
    "update-vscode": "vscode-install",
    "postinstall": "vscode-install",
    "vscode:prepublish": "npm run update-vscode && cd .. && npm run compile",
    "clean": "rimraf out node-modules server"
  },
  "devDependencies": {
    "@types/mocha": "^5.2.6",
    "@types/node": "^11.13.5",
    "@types/open": "^6.1.0",
    "rimraf": "^2.6.3",
    "ts-node": "^8.1.0",
    "tsconfig-paths": "^3.8.0",
    "tslint": "^5.12.1",
    "typescript": "^3.4.3",
    "vsce": "^1.59.0",
    "vscode": "^1.1.33"
  },
  "dependencies": {
    "@types/tmp": "0.0.34",
    "abap-adt-api": "^0.5.19",
    "event-stream": "4.0.1",
    "fs-jetpack": "^2.2.2",
    "open": "^6.1.0",
    "tmp-promise": "^1.0.5",
    "tough-cookie": "^3.0.1",
    "vscode-languageclient": "^4.4.2"
  },
  "extensionDependencies": [
    "larshp.vscode-abap"
  ],
  "activationEvents": [
    "onFileSystem:adt",
    "onCommand:abapfs.connect"
  ],
  "main": "./out/extension",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "abapfs",
          "title": "Abap FS",
          "icon": "images/abapfs_activitybar.svg"
        }
      ]
    },
    "views": {
      "abapfs": [
        {
          "id": "abapfs.transports",
          "name": "Transports",
          "when": "abapfs:extensionActive"
        }
      ],
      "explorer": [
        {
          "id": "abapfs.favorites",
          "name": "Favorites",
          "when": "abapfs:extensionActive"
        }
      ]
    },
    "commands": [
      {
        "command": "abapfs.connect",
        "title": "ABAPfs Connect to an ABAP system"
      },
      {
        "command": "abapfs.search",
        "title": "ABAPfs Search for object"
      },
      {
        "command": "abapfs.create",
        "title": "ABAPfs Create object"
      },
      {
        "command": "abapfs.createtestinclude",
        "title": "ABAPfs Create test class include"
      },
      {
        "command": "abapfs.addfavourite",
        "title": "ABAPfs Add favourite"
      },
      {
        "command": "abapfs.deletefavourite",
        "title": "ABAPfs delete favourite",
        "icon": {
          "dark": "images/dark/icon-delete.svg",
          "light": "images/light/icon-delete.svg"
        }
      },
      {
        "command": "abapfs.activate",
        "title": "ABAPfs Activate current object (will also save if dirty)",
        "icon": {
          "dark": "images/activate_single.svg",
          "light": "images/activate_single.svg"
        }
      },
      {
        "command": "abapfs.refreshtransports",
        "title": "ABAPfs refresh transports",
        "icon": {
          "dark": "images/dark/icon-refresh.svg",
          "light": "images/light/icon-refresh.svg"
        }
      },
      {
        "command": "abapfs.execute",
        "title": "ABAPfs Open in SAPGUI"
      },
      {
        "command": "abapfs.unittest",
        "title": "ABAPfs run unit tests"
      },
      {
        "command": "abapfs.openTransportObject",
        "title": "ABAPfs Open transportable object"
      },
      {
        "command": "abapfs.deleteTransport",
        "title": "ABAPfs Delete transport",
        "icon": {
          "dark": "images/dark/icon-delete.svg",
          "light": "images/light/icon-delete.svg"
        }
      },
      {
        "command": "abapfs.releaseTransport",
        "title": "ABAPfs Release transport",
        "icon": {
          "dark": "images/dark/truck.svg",
          "light": "images/light/truck.svg"
        }
      },
      {
        "command": "abapfs.transportOwner",
        "title": "ABAPfs Change transport owner",
        "icon": {
          "dark": "images/dark/user.svg",
          "light": "images/light/user.svg"
        }
      },
      {
        "command": "abapfs.transportAddUser",
        "title": "ABAPfs Change transport owner",
        "icon": {
          "dark": "images/dark/useradd.svg",
          "light": "images/light/useradd.svg"
        }
      },
      {
        "command": "abapfs.quickfix",
        "title": "apply fix"
      },
      {
        "command": "abapfs.transportUser",
        "title": "ABAPfs List transports for a given user",
        "icon": {
          "dark": "images/dark/user.svg",
          "light": "images/light/user.svg"
        }
      },
      {
        "command": "abapfs.opendiff",
        "title": "Compare with revision",
        "icon": {
          "dark": "images/dark/icon-compare.svg",
          "light": "images/light/icon-compare.svg"
        }
      },
      {
        "command": "abapfs.openrevstate",
        "title": "Open current version"
      },
      {
        "command": "abapfs.transportObjectDiff",
        "title": "Open current version",
        "icon": {
          "dark": "images/dark/icon-compare.svg",
          "light": "images/light/icon-compare.svg"
        }
      },
      {
        "command": "abapfs.transportRevision",
        "title": "Add transport to source control",
        "icon": {
          "dark": "images/dark/icon-repo.svg",
          "light": "images/light/icon-repo.svg"
        }
      },
      {
        "command": "abapfs.clearScmGroup",
        "title": "Clear",
        "icon": {
          "dark": "images/dark/icon-delete.svg",
          "light": "images/light/icon-delete.svg"
        }
      }
    ],
    "keybindings": [
      {
        "command": "abapfs.execute",
        "key": "F5",
        "when": "editorTextFocus && editorLangId == abap"
      },
      {
        "command": "editor.action.formatDocument",
        "key": "ctrl+shift+i",
        "when": "editorTextFocus && editorLangId == abap"
      },
      {
        "command": "abapfs.unittest",
        "key": "ctrl+shift+f11"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "abapfs.connect"
        },
        {
          "command": "abapfs.search",
          "when": "abapfs:extensionActive"
        },
        {
          "command": "abapfs.create",
          "when": "abapfs:extensionActive"
        },
        {
          "command": "abapfs.createtestinclude",
          "when": "abapfs:extensionActive"
        },
        {
          "command": "abapfs.addfavourite",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.deletefavourite",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.activate",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.refreshtransports",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.execute",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.unittest",
          "when": "abapfs:extensionActive"
        },
        {
          "command": "abapfs.openTransportObject",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.deleteTransport",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.releaseTransport",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.transportOwner",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.transportAddUser",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.quickfix",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.transportUser",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.opendiff",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.openrevstate",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.transportObjectDiff",
          "when": "hideCommands.never"
        },
        {
          "command": "abapfs.transportRevision",
          "when": "hideCommands.never"
        }
      ],
      "view/item/context": [
        {
          "command": "abapfs.deletefavourite",
          "group": "inline",
          "when": "view == abapfs.favorites && viewItem == favourite"
        },
        {
          "command": "abapfs.releaseTransport",
          "group": "inline",
          "when": "view == abapfs.transports && viewItem == tr_unreleased"
        },
        {
          "command": "abapfs.deleteTransport",
          "group": "inline",
          "when": "view == abapfs.transports && viewItem == tr_unreleased"
        },
        {
          "command": "abapfs.transportOwner",
          "group": "inline",
          "when": "view == abapfs.transports && viewItem == tr_unreleased"
        },
        {
          "command": "abapfs.transportAddUser",
          "group": "inline",
          "when": "view == abapfs.transports && viewItem == tr_unreleased"
        },
        {
          "command": "abapfs.transportUser",
          "group": "inline",
          "when": "view == abapfs.transports && viewItem == tr_connection"
        },
        {
          "command": "abapfs.transportObjectDiff",
          "group": "inline",
          "when": "view == abapfs.transports && viewItem == tr_object"
        },
        {
          "command": "abapfs.transportRevision",
          "group": "inline",
          "when": "view == abapfs.transports && viewItem == tr_unreleased "
        },
        {
          "command": "abapfs.transportRevision",
          "group": "inline",
          "when": "view == abapfs.transports && viewItem == tr_released"
        }
      ],
      "view/title": [
        {
          "command": "abapfs.refreshtransports",
          "group": "navigation",
          "when": "view == abapfs.transports"
        }
      ],
      "editor/title": [
        {
          "command": "abapfs.activate",
          "group": "navigation",
          "when": "resourceScheme == adt && editorLangId == abap && abapfs:showActivate "
        }
      ],
      "scm/resourceGroup/context": [
        {
          "command": "abapfs.clearScmGroup",
          "group": "inline",
          "when": "scmProvider =~ /^ABAP/"
        }
      ],
      "scm/resourceState/context": [
        {
          "command": "abapfs.openrevstate",
          "group": "context",
          "when": "scmProvider =~ /^ABAP/"
        },
        {
          "command": "abapfs.opendiff",
          "group": "inline",
          "when": "scmProvider =~ /^ABAP/"
        }
      ],
      "explorer/context": [
        {
          "command": "abapfs.createtestinclude",
          "when": "resourceScheme == adt && resourceFilename =~ /.clas\\.abap$/",
          "group": "2_workspace@1"
        },
        {
          "command": "abapfs.create",
          "when": "resourceScheme == adt",
          "group": "2_workspace@1"
        },
        {
          "command": "abapfs.addfavourite",
          "when": "resourceScheme == adt",
          "group": "2_workspace@1"
        },
        {
          "command": "abapfs.search",
          "when": "resourceScheme == adt",
          "group": "4_search@1"
        }
      ]
    },
    "configuration": {
      "title": "ABAP-FS configuration",
      "properties": {
        "abapfs.remote": {
          "type": "object",
          "description": "ABAP systems",
          "patternProperties": {
            "[a-zA-Z][a-zA-Z0-9][a-zA-Z0-9]": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "Server base URL",
                  "$comment": "https://<myserver>:<myport>",
                  "default": "https://myserver:44300"
                },
                "username": {
                  "type": "string",
                  "description": "User name"
                },
                "password": {
                  "type": "string",
                  "description": "Password"
                },
                "client": {
                  "type": "string",
                  "description": "Client",
                  "format": "[0-9][0-9][0-9]",
                  "minLength": 3,
                  "maxLength": 3
                },
                "language": {
                  "type": "string",
                  "description": "Login language",
                  "format": "[a-zA-Z][a-zA-Z]",
                  "minLength": 2,
                  "maxLength": 2
                },
                "allowSelfSigned": {
                  "type": "boolean",
                  "title": "Do not validate SSL certificates (lowers the connection security)",
                  "default": false
                },
                "customCA": {
                  "type": "string",
                  "title": "Custom certificate authority certificate"
                },
                "sapGui": {
                  "type": "object",
                  "description": "SapGUI integration (optional, default guessed from URL)",
                  "properties": {
                    "disabled": {
                      "type": "boolean"
                    },
                    "group": {
                      "type": "string",
                      "description": "Group (for load balancing)"
                    },
                    "messageServer": {
                      "type": "string",
                      "description": "Message server (for load balancing)"
                    },
                    "messageServerPort": {
                      "type": "string",
                      "description": "Message server port (for load balancing)",
                      "format": "[0-9][0-9][0-9][0-9]",
                      "default": "3600"
                    },
                    "server": {
                      "type": "string",
                      "description": "Server (without load balancing)"
                    },
                    "systemNumber": {
                      "type": "string",
                      "description": "System number (without load balancing)",
                      "minLength": 2,
                      "maxLength": 2,
                      "format": "\n\n"
                    },
                    "routerString": {
                      "type": "string",
                      "description": "Router String"
                    }
                  }
                }
              },
              "required": [
                "url",
                "username",
                "password"
              ]
            }
          }
        }
      }
    }
  }
}
